
// Generated by ApiCrawler

using System;
using Trustev.Api.Client.Entities;
using Newtonsoft.Json;

namespace Trustev.Api.Client.Entities {

		
	/// <summary>
	/// 
	/// </summary>
	public class Transaction {

		#region Public properties

				
		/// <summary>
		/// This is the Transaction Id. This Id is returned when Transaction information has been added to a Trustev Case.		/// This Id is required should you wish to update the Transaction details after a Trustev Case has been added.		/// Please note: this Id is always returned from the Trustev API as a reference Id to the specific object.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public System.Guid? Id;
		
		/// <summary>
		/// Total Value of the Transaction.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public decimal? TotalTransactionValue;
		
		/// <summary>
		/// Currency Type Code. Standard Currency Type codes can be found at http://www.xe.com/currency
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public string Currency;
		
		/// <summary>
		/// Current Timestamp. Accepted format: yyyy-MM-ddTHH:mm:ss.fffZ		/// See our FAQ section for more information.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public System.DateTime? Timestamp;
		
		/// <summary>
		/// Addresses Object â€“ Contains standard/delivery/billing information.		/// Please see Address Object for further parameter information.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public Address[] Addresses;
		
		/// <summary>
		/// Items Object â€“ contains details on Item Name, Quantity and Item Value.		/// Please see Items Object for further parameter information.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public TransactionItem[] Items;

		
		#endregion
		
		#region Constructor

		/// <summary>
		/// 
		/// </summary>
		/// <param name="jsonObject">JSON string defines object</param>
		public Transaction(string jsonObject = null) {
		if(jsonObject!=null) {
				var desObj = JsonConvert.DeserializeObject<Transaction>(jsonObject);
				this.Id = desObj.Id;
				this.TotalTransactionValue = desObj.TotalTransactionValue;
				this.Currency = desObj.Currency;
				this.Timestamp = desObj.Timestamp;
				this.Addresses = desObj.Addresses;
				this.Items = desObj.Items;
			}
		}

		#endregion
	}
}

