
// Generated by ApiCrawler

using System;
using Trustev.Api.Client.Entities;
using Newtonsoft.Json;

namespace Trustev.Api.Client.Entities {

		
	/// <summary>
	/// 
	/// </summary>
	public class Case {

		#region Public properties

				
		/// <summary>
		/// This is the Case Id. The CaseId is returned once a Trustev Case has been created.		/// It is required when getting a Trustev Decision on a Trustev Case, when updating a Case Status, and anytime you wish to update Trustev Case information.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public string Id;
		
		/// <summary>
		/// SessionId is required when adding a Trustev Case. SessionId is available through Trustev.js as a publicly accessible variable - TrustevV2.SessionId
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public System.Guid? SessionId;
		
		/// <summary>
		/// The CaseNumber is chosen by the Merchant to uniquely identify the Trustev Case. It can be an alphanumeric string of your liking.		/// Please see our Testing Guide to find out how to use the CaseNumber to get expected Trustev Decisions during Integration.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public string CaseNumber;
		
		/// <summary>

		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public Transaction Transaction;
		
		/// <summary>
		/// Customer Object - includes details like First/Last name of Customer, address details, phone numbers, email addresses.		/// Social details may also be included here where available.		/// Please see Customer object for further parameter information.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public Customer Customer;
		
		/// <summary>
		/// A Status includes the Order Status and a Comment section.		/// Trustev require that a Status is attached to a Trustev Case so that we can learn from the decision that you make on a Trustev Case.		/// Please see Why add Statuses? for more information.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public CaseStatus[] Statuses;
		
		/// <summary>
		/// Payments includes forwarding the Payment Type (Credit/Debit Card, PayPalâ€¦), and the BIN/IIN Number of the relevant card should it be available.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public Payment[] Payments;
		
		/// <summary>
		/// Current Timestamp. Accepted format: yyyy-MM-ddTHH:mm:ss.fffZ		/// See our FAQ section for more information.
		/// </summary>
		[JsonProperty(NullValueHandling = NullValueHandling.Ignore)]
		public System.DateTime? Timestamp;

		
		#endregion
		
		#region Constructor

		/// <summary>
		/// 
		/// </summary>
		/// <param name="jsonObject">JSON string defines object</param>
		public Case(string jsonObject = null) {
		if(jsonObject!=null) {
				var desObj = JsonConvert.DeserializeObject<Case>(jsonObject);
				this.Id = desObj.Id;
				this.SessionId = desObj.SessionId;
				this.CaseNumber = desObj.CaseNumber;
				this.Transaction = desObj.Transaction;
				this.Customer = desObj.Customer;
				this.Statuses = desObj.Statuses;
				this.Payments = desObj.Payments;
				this.Timestamp = desObj.Timestamp;
			}
		}

		#endregion
	}
}

